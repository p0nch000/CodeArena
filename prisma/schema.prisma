generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

/// CHALLENGE METRICS
model challenge_metrics {
  id_metrics           String     @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  total_submissions    Int        @default(0)
  correct_submissions  Int        @default(0)
  avg_time_complexity  String
  avg_space_complexity String
  likes                Int        @default(0)
  id_challenge         String     @db.Uuid
  challenges           challenges @relation(fields: [id_challenge], references: [id_challenge], onDelete: Cascade, onUpdate: NoAction)

  @@index([id_challenge], map: "idx_metrics_challenge")
}

/// CHALLENGES
model challenges {
  id_challenge      String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  title             String              @db.VarChar(100)
  description       String
  difficulty        String              @db.VarChar(10)
  published         Boolean             @default(false)
  runtime           Decimal?            @db.Decimal(10, 2)
  memory            Decimal?            @db.Decimal(10, 2)
  deadline          DateTime?           @db.Timestamp(6)
  created_by        String?             @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  challenge_metrics challenge_metrics[]
  users             users?              @relation(fields: [created_by], references: [id_user], onUpdate: NoAction)
  submissions       submissions[]
  test_cases        test_cases[]

  @@index([created_by], map: "idx_challenges_created_by")
}

/// RANKS
model ranks {
  id_rank    String  @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  name       String  @unique @db.VarChar(50)
  min_points Int
  icon_url   String? @db.VarChar(255)
  users      users[]
}

/// SUBMISSION RESULTS
model submission_result {
  id_result      String      @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  code           String
  is_correct     Boolean
  output_result  String
  execution_time Float
  memory_space   Float
  error_message  String?
  id_test_case   String      @db.Uuid
  id_submission  String      @db.Uuid
  submissions    submissions @relation(fields: [id_submission], references: [id_submission], onDelete: Cascade, onUpdate: NoAction)
  test_cases     test_cases  @relation(fields: [id_test_case], references: [id_test], onDelete: Cascade, onUpdate: NoAction)

  @@index([id_submission], map: "idx_submission_result_submission")
  @@index([id_test_case], map: "idx_submission_result_test_case")
}

/// SUBMISSIONS
model submissions {
  id_submission        String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  final_code           String
  submitted_at         DateTime            @default(now()) @db.Timestamp(6)
  is_correct           Boolean
  final_execution_time Float?
  final_memory_space   Float?
  programming_language String              @db.VarChar(30)
  status               String              @db.VarChar(20)
  id_user              String              @db.Uuid
  id_challenge         String              @db.Uuid
  submission_result    submission_result[]
  challenges           challenges          @relation(fields: [id_challenge], references: [id_challenge], onDelete: Cascade, onUpdate: NoAction)
  users                users               @relation(fields: [id_user], references: [id_user], onDelete: Cascade, onUpdate: NoAction)

  @@index([id_challenge], map: "idx_submissions_challenge")
  @@index([id_user], map: "idx_submissions_user")
}

/// TEST CASES
model test_cases {
  id_test           String              @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  user_input        String
  expected_output   String
  is_hidden         Boolean             @default(false)
  id_challenge      String              @db.Uuid
  created_at        DateTime?           @default(now()) @db.Timestamp(6)
  submission_result submission_result[]
  challenges        challenges          @relation(fields: [id_challenge], references: [id_challenge], onDelete: Cascade, onUpdate: NoAction)

  @@index([id_challenge], map: "idx_test_cases_id_challenge")
}

/// USERS
model users {
  id_user       String        @id @default(dbgenerated("uuid_generate_v4()")) @db.Uuid
  username      String        @unique @db.VarChar(50)
  password_hash String
  mail          String        @unique @db.VarChar(255)
  user_role     String        @db.VarChar(20)
  points        Int           @default(0)
  id_rank       String?       @db.Uuid
  created_at    DateTime?     @default(now()) @db.Timestamp(6)
  updated_at    DateTime?     @default(now()) @db.Timestamp(6)
  challenges    challenges[]
  submissions   submissions[]
  ranks         ranks?        @relation(fields: [id_rank], references: [id_rank], onUpdate: NoAction)

  @@index([id_rank], map: "idx_users_id_rank")
}
